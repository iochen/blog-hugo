<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go(lang) on Richard Chen's Blog</title><link>https://iochen.com/tags/golang/</link><description>Recent content in Go(lang) on Richard Chen's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>©2020-2021 Richard Chen.</copyright><lastBuildDate>Mon, 03 Aug 2020 17:55:59 +0800</lastBuildDate><atom:link href="https://iochen.com/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>ICMP首部 与 IP首部 校验和的计算</title><link>https://iochen.com/post/icmp-header-and-ip-header-checksum/</link><pubDate>Mon, 03 Aug 2020 17:55:59 +0800</pubDate><guid>https://iochen.com/post/icmp-header-and-ip-header-checksum/</guid><description>&lt;p>本篇文章详细讲解了计算 &lt;strong>ICMP 首部&lt;/strong> 与 &lt;strong>IP 首部&lt;/strong> 的计算方法，以及其校验方法&lt;/p>
&lt;h2 id="开头">开头&lt;/h2>
&lt;p>以下内容是一段 &lt;strong>IPv4&lt;/strong> 的示例首部数据包&lt;/p>
&lt;pre>&lt;code class="language-hex">4500 0073 0000 4000 4011 *B861* C0A8 0001
C0A8 00C7
&lt;/code>&lt;/pre>
&lt;p>&lt;em>注：被&lt;code>*&lt;/code>引起的部分为需要计算的校验和&lt;/em>&lt;/p>
&lt;p>既然是要计算校验和，那开始肯定是不知道的，所以我们默认为&lt;code>0000&lt;/code>，所以，我么就是要对下面这一串数据进行校验和操作。&lt;/p>
&lt;pre>&lt;code class="language-hex">4500 0073 0000 4000 4011 0000 C0A8 0001
C0A8 00C7
&lt;/code>&lt;/pre>
&lt;h2 id="第一步">第一步&lt;/h2>
&lt;p>每&lt;strong>16&lt;/strong>字节相加求和，于是我们就有了&lt;/p>
&lt;p>$$\mathtt{0x4500}+\mathtt{0x0073}+\mathtt{0x0000}+&amp;hellip;+\mathtt{0x00C7}=\mathtt{0x2479C}$$&lt;/p>
&lt;h3 id="go代码实现">&lt;strong>Go&lt;/strong>代码实现&lt;/h3>
&lt;p>注：传入&lt;code>data []byte&lt;/code>，大端编码&lt;/p>
&lt;pre>&lt;code class="language-go">var sum uint32
var length = len(data)
var index int
for length &amp;gt; 1 {
sum += uint32(data[index])&amp;lt;&amp;lt;8 + uint32(data[index+1])
index += 2
length -= 2
}
// 如果len(data)为奇数
if length &amp;gt; 0 {
sum += uint32(data[index])
}
&lt;/code>&lt;/pre>
&lt;h2 id="第二步">第二步&lt;/h2>
&lt;p>由于我们的校验码只有&lt;strong>16&lt;/strong>bit，所以我们就要把上面的$\mathtt{0x2479C}$转为&lt;strong>16&lt;/strong>bit&lt;br>
&lt;code>2479C&lt;/code>可以转化为&lt;/p>
&lt;pre>&lt;code>0002 479C
&lt;/code>&lt;/pre>
&lt;p>那我们可以将两个相加，即&lt;/p>
&lt;p>$$\mathtt{0x0002}+\mathtt{0x479C}=\mathtt{0x479E}$$&lt;/p>
&lt;p>如果这样算下来还是超过&lt;strong>16&lt;/strong>bit，则需再次进行此运算。
那么最多需要几次运算呢，我们可以算一下。&lt;/p>
&lt;h3 id="极端情况">极端情况&lt;/h3>
&lt;p>由谷歌可知，&lt;strong>TCP&lt;/strong>包最大为&lt;code>65535 bytes&lt;/code>，以&lt;strong>16&lt;/strong>bit 为一个小节的话，也就是&lt;code>32767.5&lt;/code>个小节。
假设每个小节都是$\mathtt{0xFFFF}$（剩余的半个小节以$\mathtt{0x00FF}$计算）。&lt;br>
已知&lt;code>32767&lt;/code>的十六进制为$\mathtt{0x7FFF}$，那求和最大是&lt;/p>
&lt;p>$$\mathtt{0x7FFF}\times{}\mathtt{0xFFFF}+\mathtt{0x00FF}=\mathtt{0x7FFE8100}
$$&lt;/p>
&lt;p>第一次进行第二步运算后结果为$\mathtt{0x100FE
}$，第二次为$\mathtt{0x00FF}$&lt;br>
所以不难看出，最多需要&lt;mark>&lt;strong>两次&lt;/strong>&lt;/mark>第二步的运算即可。&lt;/p>
&lt;h3 id="go代码实现-1">&lt;strong>Go&lt;/strong>代码实现&lt;/h3>
&lt;pre>&lt;code class="language-go">sum = (sum &amp;gt;&amp;gt; 16) + (sum &amp;amp; 0xFFFF)
// 与上一行代码作用相同，
// 超过16bit的部分会在最后被舍弃掉
sum += sum &amp;gt;&amp;gt; 16
&lt;/code>&lt;/pre>
&lt;h2 id="第三步">第三步&lt;/h2>
&lt;p>取反运算，这一步的目的是为了验证的方便。&lt;/p>
&lt;p>$$\overline{\mathtt{0x479E}} = \mathtt{0xB861}$$&lt;/p>
&lt;h3 id="go代码实现-2">&lt;strong>Go&lt;/strong>代码实现&lt;/h3>
&lt;pre>&lt;code class="language-go">return uint16(^sum)
&lt;/code>&lt;/pre>
&lt;h2 id="总结">总结&lt;/h2>
&lt;h3 id="go代码实现-3">&lt;strong>Go&lt;/strong>代码实现&lt;/h3>
&lt;pre>&lt;code class="language-go">func Checksum(data []byte) uint16 {
var sum uint32
var length = len(data)
var index int
for length &amp;gt; 1 {
sum += uint32(data[index])&amp;lt;&amp;lt;8 + uint32(data[index+1])
index += 2
length -= 2
}
// 如果len(data)为奇数
if length &amp;gt; 0 {
sum += uint32(data[index])
}
sum = (sum &amp;gt;&amp;gt; 16) + (sum &amp;amp; 0xFFFF)
// 与上一行代码作用相同，
// 超过16bit的部分会在最后被舍弃掉
sum += sum &amp;gt;&amp;gt; 16
return uint16(^sum)
}
&lt;/code>&lt;/pre></description></item><item><title>在 Go 中获取 GOPATH 的最佳方案</title><link>https://iochen.com/post/get-go-path-in-go/</link><pubDate>Fri, 17 Jul 2020 20:47:28 +0800</pubDate><guid>https://iochen.com/post/get-go-path-in-go/</guid><description>&lt;p>此文章主要讲述了在 golang 程序中完美获取 GOPATH 的方法&lt;/p>
&lt;h2 id="初级">初级&lt;/h2>
&lt;p>golang 的最初几个版本都是依赖于环境变量中的 &lt;strong>GOPATH&lt;/strong> 来进行判断的，
所以在这种情况下，只需要&lt;/p>
&lt;pre>&lt;code class="language-go">os.Getenv(&amp;quot;GOPATH&amp;quot;) // import &amp;quot;os&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>即可，最多再解析一下&lt;/p>
&lt;pre>&lt;code class="language-go">sep := string(filepath.ListSeparator)
pathList := strings.Split(path, sep) // import &amp;quot;strings&amp;quot;
&lt;/code>&lt;/pre>
&lt;h2 id="中级">中级&lt;/h2>
&lt;p>我们有时发现，即使是没有 &lt;strong>GOPATH&lt;/strong> 这个 env，也是可以正常运行。
经阅读 golang 源代码后，不难发现，其有默认值。&lt;br>
&lt;em>&lt;b>&lt;a href="https://golang.org/src/go/build/build.go#L273"target="_blank">&amp;nbsp;&lt;i class="fa fa-external-link" aria-hidden="true" style="font-size: small">&lt;/i>golang 源代码&amp;nbsp;&lt;/a>&lt;/b>&lt;/em>:&lt;/p>
&lt;pre>&lt;code class="language-go">c.GOPATH = envOr(&amp;quot;GOPATH&amp;quot;, defaultGOPATH())
&lt;/code>&lt;/pre>
&lt;p>不难发现，其实我们 &lt;strong>build&lt;/strong> 包中就已有 envOr 的实现，于是，
现在的我们只需要&lt;/p>
&lt;pre>&lt;code class="language-go">build.Default.GOPATH // import &amp;quot;go/build&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>即可&lt;/p>
&lt;h2 id="高级">高级&lt;/h2>
&lt;p>我们发现&lt;/p>
&lt;pre>&lt;code class="language-shell">$ go env -w GOPATH=/foo/bar
&lt;/code>&lt;/pre>
&lt;p>时，并未将 &lt;code>/foo/bar&lt;/code> 写入环境变量，而是写入了 env 文件，经
查看源代码后，不难发现 &lt;em>&lt;b>&lt;a href="https://github.com/golang/go/blob/c4f2a9788a7be04daf931ac54382fbe2cb754938/src/cmd/go/internal/cfg/cfg.go#L151"target="_blank">&amp;nbsp;&lt;i class="fa fa-external-link" aria-hidden="true" style="font-size: small">&lt;/i>EnvFile 的实现&amp;nbsp;&lt;/a>&lt;/b>&lt;/em>&lt;/p>
&lt;pre>&lt;code class="language-go">// EnvFile returns the name of the Go environment configuration file.
func EnvFile() (string, error) {
if file := os.Getenv(&amp;quot;GOENV&amp;quot;); file != &amp;quot;&amp;quot; {
if file == &amp;quot;off&amp;quot; {
return &amp;quot;&amp;quot;, fmt.Errorf(&amp;quot;GOENV=off&amp;quot;)
}
return file, nil
}
dir, err := os.UserConfigDir()
if err != nil {
return &amp;quot;&amp;quot;, err
}
if dir == &amp;quot;&amp;quot; {
return &amp;quot;&amp;quot;, fmt.Errorf(&amp;quot;missing user-config dir&amp;quot;)
}
return filepath.Join(dir, &amp;quot;go/env&amp;quot;), nil
}
&lt;/code>&lt;/pre>
&lt;p>于是，最终我们有了&lt;/p>
&lt;pre>&lt;code class="language-go">func envFile() (string, error) {
if file := os.Getenv(&amp;quot;GOENV&amp;quot;); file != &amp;quot;&amp;quot; {
if file == &amp;quot;off&amp;quot; {
return &amp;quot;&amp;quot;, fmt.Errorf(&amp;quot;GOENV=off&amp;quot;)
}
return file, nil
}
dir, err := os.UserConfigDir()
if err != nil {
return &amp;quot;&amp;quot;, err
}
if dir == &amp;quot;&amp;quot; {
return &amp;quot;&amp;quot;, fmt.Errorf(&amp;quot;missing user-config dir&amp;quot;)
}
return filepath.Join(dir, &amp;quot;go&amp;quot;, &amp;quot;env&amp;quot;), nil
}
func getRuntimeEnv(key string) (string, error) {
file, err := envFile()
if err != nil {
return &amp;quot;&amp;quot;, err
}
if file == &amp;quot;&amp;quot; {
return &amp;quot;&amp;quot;, fmt.Errorf(&amp;quot;missing runtime env file&amp;quot;)
}
var data []byte
var runtimeEnv string
data, err = ioutil.ReadFile(file)
envStrings := strings.Split(string(data), &amp;quot;\n&amp;quot;)
for _, envItem := range envStrings {
envItem = strings.TrimSuffix(envItem, &amp;quot;\r&amp;quot;)
envKeyValue := strings.Split(envItem, &amp;quot;=&amp;quot;)
if strings.ToLower(envKeyValue[0]) == strings.ToLower(key) {
runtimeEnv = envKeyValue[1]
}
}
return runtimeEnv, nil
}
goPath, envErr := getRuntimeEnv(&amp;quot;GOPATH&amp;quot;)
if envErr != nil {
fmt.Println(&amp;quot;Failed: please set '$GOPATH' manually, or use 'datapath' option to specify the path to your custom 'data' directory&amp;quot;)
return
}
if goPath == &amp;quot;&amp;quot; {
goPath = build.Default.GOPATH
}
sep := string(filepath.ListSeparator)
pathList := strings.Split(path, sep)
&lt;/code>&lt;/pre>
&lt;h2 id="相关">相关&lt;/h2>
&lt;p>Related Pull Request: &lt;em>&lt;b>&lt;a href="https://github.com/v2ray/domain-list-community/pull/637"target="_blank">&amp;nbsp;&lt;i class="fa fa-external-link" aria-hidden="true" style="font-size: small">&lt;/i>https://github.com/v2ray/domain-list-community/pull/637&amp;nbsp;&lt;/a>&lt;/b>&lt;/em>&lt;/p></description></item></channel></rss>