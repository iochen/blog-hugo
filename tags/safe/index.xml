<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>safe on Richard Chen's Blog</title><link>https://iochen.com/tags/safe/</link><description>Recent content in safe on Richard Chen's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>©2020-2021 Richard Chen.</copyright><lastBuildDate>Wed, 11 Jul 2018 19:25:20 +0000</lastBuildDate><atom:link href="https://iochen.com/tags/safe/index.xml" rel="self" type="application/rss+xml"/><item><title>nginx配置HTTPS并取得A+</title><link>https://iochen.com/post/get-a-plus-on-https-by-using-nginx/</link><pubDate>Wed, 11 Jul 2018 19:25:20 +0000</pubDate><guid>https://iochen.com/post/get-a-plus-on-https-by-using-nginx/</guid><description>&lt;p>主要是我自己的nginx配置, 并且HTTPS取得&lt;strong>A+&lt;/strong>.&lt;/p>
&lt;p>先来展示一下:&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/iochen/blog-hugo@public/img/get-A-plus-on-https-by-using-nginx/58b2543b-5fc7-43a3-9473-f30cf6218ced.png"
alt="58b2543b-5fc7-43a3-9473-f30cf6218ced"/>&lt;/p>
&lt;h1 id="直接上配置">直接上配置!&lt;/h1>
&lt;pre>&lt;code class="language-nginx">server {
listen 80;
listen [::]:80;
server_name domain.ltd; # 你的域名
return 301 https://domain.ltd$request_uri; # 你的域名
error_page 497 =301 https://domain.ltd$request_uri; # 你的域名
}
server {
listen 443 ssl http2;
listen [::]:443 ssl http2;
server_name domain.ltd; # 你的域名
add_header Strict-Transport-Security &amp;quot;max-age=63072000; includeSubDomains; preload&amp;quot;;
ssl on;
ssl_certificate /etc/certificate_path/file.pem ; # 你的证书路径
ssl_certificate_key /etc/certificate_key_path/file.pem ; # 你的证书key路径
ssl_protocols TLSv1.3 TLSv1.2;
ssl_stapling on;
ssl_ciphers &amp;quot;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&amp;quot;;
ssl_prefer_server_ciphers on;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;
ssl_dhparam /etc/myssl/dhparam.pem; # 你的DH证书路径,下面会说
charset utf-8;
access_log /var/log/nginx/access.log; # 可自行修改
error_log /var/log/nginx/error.log; # 可自行修改
location / {
root /usr/share/nginx/path; # 你的网站根目录
try_files $uri $uri/ /index.php?$uri;
index index.php index.html;
}
# ERROR pages
error_page 404 /404.html;
error_page 500 502 503 504 /50x.html;
location = /50x.html {
root /usr/share/nginx/path; # 你的网站根目录
}
# GZIP
gzip on;
gzip_min_length 1k;
gzip_comp_level 2;
gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png image/jpg;
gzip_vary on;
gzip_disable &amp;quot;MSIE [1-6]\.&amp;quot;;
# PHP
location ~ \.php$ {
root html;
fastcgi_pass 127.0.0.1:9000;
fastcgi_index index.php;
fastcgi_param SCRIPT_FILENAME /usr/share/nginx/path/$fastcgi_script_name; # 你的网站根目录
include fastcgi_params;
}
}
&lt;/code>&lt;/pre>
&lt;h1 id="必要修改说明">必要修改&amp;amp;&amp;amp;说明&lt;/h1>
&lt;h2 id="必要替换">必要替换:&lt;/h2>
&lt;pre>&lt;code>domain.ltd =&amp;gt; 你的域名
/etc/certificate_path/file.pem =&amp;gt; 你的证书路径
/etc/certificate_key_path/file.pem =&amp;gt; 你的证书key路径
/etc/myssl/dhparam.pem =&amp;gt; 你的DH证书路径,下面会说
/usr/share/nginx/path =&amp;gt; 你的网站文件根目录
&lt;/code>&lt;/pre>
&lt;h2 id="个别说明">个别说明&lt;/h2>
&lt;p>DH证书: 请先安装&lt;code>openssl&lt;/code>&lt;/p>
&lt;pre>&lt;code>openssl dhparam -dsaparam -out dhparam.pem 4096
&lt;/code>&lt;/pre>
&lt;p>建议使用&lt;strong>nohup&lt;/strong>,生成会花费一定时间.&lt;br>
&lt;em>&lt;b>&lt;a href="#nohup">&amp;nbsp;&lt;i class="fa fa-external-link" aria-hidden="true" style="font-size: small">&lt;/i>&lt;em>nohup ?&lt;/em>&amp;nbsp;&lt;/a>&lt;/b>&lt;/em>&lt;/p>
&lt;h1 id="附">附&lt;/h1>
&lt;h2 id="nohup">nohup&lt;/h2>
&lt;p>nohup使用:&lt;/p>
&lt;pre>&lt;code class="language-bash">$ nohup [应该的命令] &amp;amp;
&lt;/code>&lt;/pre>
&lt;p>会将屏幕输出内容存放在本地目录下&lt;code>nohup.out&lt;/code>文件内&lt;/p></description></item></channel></rss>